{"url": "https://api.github.com/repos/PX4/PX4-Autopilot/issues/19640", "repository_url": "https://api.github.com/repos/PX4/PX4-Autopilot", "labels_url": "https://api.github.com/repos/PX4/PX4-Autopilot/issues/19640/labels{/name}", "comments_url": "https://api.github.com/repos/PX4/PX4-Autopilot/issues/19640/comments", "events_url": "https://api.github.com/repos/PX4/PX4-Autopilot/issues/19640/events", "html_url": "https://github.com/PX4/PX4-Autopilot/issues/19640", "id": 1233017112, "node_id": "I_kwDOAFDaZs5JflkY", "number": 19640, "title": "Not arming in offboard mode", "user": {"login": "MrPrietix", "id": 44204476, "node_id": "MDQ6VXNlcjQ0MjA0NDc2", "avatar_url": "https://avatars.githubusercontent.com/u/44204476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MrPrietix", "html_url": "https://github.com/MrPrietix", "followers_url": "https://api.github.com/users/MrPrietix/followers", "following_url": "https://api.github.com/users/MrPrietix/following{/other_user}", "gists_url": "https://api.github.com/users/MrPrietix/gists{/gist_id}", "starred_url": "https://api.github.com/users/MrPrietix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MrPrietix/subscriptions", "organizations_url": "https://api.github.com/users/MrPrietix/orgs", "repos_url": "https://api.github.com/users/MrPrietix/repos", "events_url": "https://api.github.com/users/MrPrietix/events{/privacy}", "received_events_url": "https://api.github.com/users/MrPrietix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-05-11T18:11:27Z", "updated_at": "2022-05-11T18:11:27Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nI am using a pixhawk v5 (px4 version 1.13) with a companion computer. When running the micrortps bridge it is possible to see the topics in ROS2. Thus, the information from the flight controller is sent to the companion computer. However, when I arm it using the following code the drone does not arm. Is it because the target_system, target_component, source_system and source_component are different than 1?. Is there anything else required to send commands using the vehicle_command UORB message?\r\n\r\nThanks\r\n\r\n`#include <px4_msgs/msg/offboard_control_mode.hpp>\r\n#include <px4_msgs/msg/trajectory_setpoint.hpp>\r\n#include <px4_msgs/msg/timesync.hpp>\r\n#include <px4_msgs/msg/vehicle_command.hpp>\r\n#include <px4_msgs/msg/vehicle_control_mode.hpp>\r\n#include <rclcpp/rclcpp.hpp>\r\n#include <stdint.h>\r\n\r\n#include <chrono>\r\n#include <iostream>\r\n\r\nusing namespace std::chrono;\r\nusing namespace std::chrono_literals;\r\nusing namespace px4_msgs::msg;\r\n\r\nclass OffboardControl : public rclcpp::Node {\r\npublic:\r\n\tOffboardControl() : Node(\"offboard_control\") {\r\n\t\tvehicle_command_publisher_ =\r\n\t\t\tthis->create_publisher<VehicleCommand>(\"fmu/vehicle_command/in\", 10);\r\n\r\n\t\t// get common timestamp\r\n\t\ttimesync_sub_ =\r\n\t\t\tthis->create_subscription<px4_msgs::msg::Timesync>(\"fmu/timesync/out\", 10,\r\n\t\t\t\t[this](const px4_msgs::msg::Timesync::UniquePtr msg) {\r\n\t\t\t\t\ttimestamp_.store(msg->timestamp);\r\n\t\t\t\t});\r\n\r\n\t\tauto timer_callback = [this]() -> void {\r\n\r\n\t\t    // Arm the vehicle\r\n\t\t\tthis->arm();\r\n\r\n\t\t};\r\n\t\ttimer_ = this->create_wall_timer(100ms, timer_callback);\r\n\t}\r\n\r\n\tvoid arm() const;\r\n\tvoid disarm() const;\r\n\r\nprivate:\r\n\trclcpp::TimerBase::SharedPtr timer_;\r\n\r\n\trclcpp::Publisher<VehicleCommand>::SharedPtr vehicle_command_publisher_;\r\n\trclcpp::Subscription<px4_msgs::msg::Timesync>::SharedPtr timesync_sub_;\r\n\r\n\tstd::atomic<uint64_t> timestamp_;   //!< common synced timestamped\r\n\r\n\tvoid publish_vehicle_command(uint16_t command, float param1 = 0.0,float param2 = 0.0) const;\r\n};\r\n\r\n/**\r\n * @brief Send a command to Arm the vehicle\r\n */\r\nvoid OffboardControl::arm() const {\r\n\tpublish_vehicle_command(VehicleCommand::VEHICLE_CMD_COMPONENT_ARM_DISARM, 1.0);\r\n\r\n\tRCLCPP_INFO(this->get_logger(), \"Arm command send\");\r\n}\r\n\r\n/**\r\n * @brief Send a command to Disarm the vehicle\r\n */\r\nvoid OffboardControl::disarm() const {\r\n\tpublish_vehicle_command(VehicleCommand::VEHICLE_CMD_COMPONENT_ARM_DISARM, 0.0);\r\n\r\n\tRCLCPP_INFO(this->get_logger(), \"Disarm command send\");\r\n}\r\n\r\n\r\n/**\r\n * @brief Publish vehicle commands\r\n * @param command   Command code (matches VehicleCommand and MAVLink MAV_CMD codes)\r\n * @param param1    Command parameter 1\r\n * @param param2    Command parameter 2\r\n */\r\nvoid OffboardControl::publish_vehicle_command(uint16_t command, float param1,\r\n\t\t\t\t\t      float param2) const {\r\n\tVehicleCommand msg{};\r\n\tmsg.timestamp = timestamp_.load();\r\n\tmsg.param1 = param1;\r\n\tmsg.param2 = param2;\r\n\tmsg.command = command;\r\n\tmsg.target_system = 1;\r\n\tmsg.target_component = 1;\r\n\tmsg.source_system = 1;\r\n\tmsg.source_component = 1;\r\n\tmsg.from_external = true;\r\n\r\n\tvehicle_command_publisher_->publish(msg);\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n\tstd::cout << \"Starting offboard control node...\" << std::endl;\r\n\tsetvbuf(stdout, NULL, _IONBF, BUFSIZ);\r\n\trclcpp::init(argc, argv);\r\n\trclcpp::spin(std::make_shared<OffboardControl>());\r\n\r\n\trclcpp::shutdown();\r\n\treturn 0;\r\n}`", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/PX4/PX4-Autopilot/issues/19640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/PX4/PX4-Autopilot/issues/19640/timeline", "performed_via_github_app": null, "state_reason": null}